/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LiterateHaskellPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var LiterateHaskellPlugin = class extends import_obsidian.Plugin {
  onload() {
    this.registerExtensions(["lhs"], "markdown");
    this.addCommand({
      id: "convert-to-lhs",
      name: "Convert file to .lhs",
      checkCallback: (checking) => {
        const mdView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if ((mdView == null ? void 0 : mdView.file.extension) === "md") {
          if (!checking) {
            mdView.editor.focus();
            const { file } = mdView;
            this.app.fileManager.renameFile(file, `${file.parent.path}/${file.basename}.lhs`);
          }
          return true;
        } else {
          return false;
        }
      }
    });
    this.addCommand({
      id: "convert-to-md",
      name: "Convert file to .md",
      checkCallback: (checking) => {
        const mdView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if ((mdView == null ? void 0 : mdView.file.extension) === "lhs") {
          if (!checking) {
            mdView.editor.focus();
            const { file } = mdView;
            this.app.fileManager.renameFile(file, `${file.parent.path}/${file.basename}.md`);
          }
          return true;
        } else {
          return false;
        }
      }
    });
    this.registerMarkdownCodeBlockProcessor("haskell", this.postprocessor.bind(this));
  }
  postprocessor(src, el, ctx) {
    return __async(this, null, function* () {
      var _a;
      const code = ctx.sourcePath.endsWith(".lhs") ? ((_a = /^\\begin{code}.*\n((?:.|\n)+)\\end{code}/.exec(src)) == null ? void 0 : _a.last()) || src : src;
      yield import_obsidian.MarkdownRenderer.renderMarkdown("```HASKELL\n" + code + "```", el, ctx.sourcePath, this);
    });
  }
};
